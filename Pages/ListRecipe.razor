@page "/list-recipe"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>List of Recipes</PageTitle>

<h1>List of Recipes </h1>

<div class="list-group">
    <CardDeck>
    @foreach (var recipe in recipes)
    {
        <Card>
            <CardImage Source=@recipe.Image Alt="Card image cap 3"></CardImage>
            <CardBody>
                <CardTitle Size="5">@recipe.Name - @recipe.Duration minutes</CardTitle>
                <Divider /> 
                <CardText TextOverflow.Truncate >
                    <Paragraph>
                    @recipe.Instructions
                    </Paragraph>
                </CardText>
                <Divider />
                <Button Color="Color.Info">Info</Button> <Button Color="Color.Success" Clicked="@(() => { selectedRecipe = recipe; ShowModal(); })">Edit Recipe</Button>
            </CardBody>
        </Card>
    } 
    </CardDeck>
    
</div>
        <Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Recipe</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Recipe Name</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@selectedRecipe.Name" Placeholder="@selectedRecipe.Name" />
                </FieldBody> 
            </Field>
            <Field>
                <FieldLabel>Image recipe Link</FieldLabel>
                <FieldBody>
                    <TextEdit @bind-Text="@selectedRecipe.Image" Placeholder="@selectedRecipe.Image" />
                </FieldBody> 
            </Field>
            <Field>
                <FieldLabel>Ingredients</FieldLabel>
                <TextEdit @bind-Text="@selectedRecipe.Ingredients" Placeholder="@selectedRecipe.Ingredients" />
            </Field>
            <Field>
                <FieldLabel>Instructions</FieldLabel>
                <TextEdit @bind-Text="@selectedRecipe.Instructions" Placeholder="@selectedRecipe.Instructions" />
            </Field>
            <Field>
                <FieldLabel>Duration</FieldLabel>
                <NumericEdit @bind-Value="@selectedRecipe.Duration" Step="15" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@DeleteRecipeAsync">Delete recipe</Button>
            <Button Color="Color.Success" Clicked="@HideModalSave" Type="ButtonType.Submit" PreventDefaultOnSubmit>Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>




@code {
private Modal modalRef;
private Task ShowModal()
{
    return modalRef.Show();
}
private Task HideModal()
{
    return modalRef.Hide();
}
private async Task HideModalSave(){
    await SaveRecipeAsync();
    await HideModal();
}
public List<RecipeItem> recipes = new(); // recipes list

private RecipeItem selectedRecipe = new();

private const string localStorageKey = "recipeapp"; // local storage key
public List<RecipeItem> RecipeItems { get; set; } = new List<RecipeItem>(); // RecipeItems list
protected override async Task OnInitializedAsync(){
    recipes = await GetRecipeAsync();
}
// GetRecipeAsync method to sync the recipes dynamically
private async Task <List<RecipeItem>> GetRecipeAsync(){
    return await localStorage.GetItemAsync<List<RecipeItem>>(localStorageKey) ?? new List<RecipeItem>();
}    

// method DeleteRecipe to delete recipes
private async Task DeleteRecipeAsync(){
    if(selectedRecipe != null){
        recipes.Remove(selectedRecipe);
       await SaveRecipeAsync();
    }
    await HideModal();
}

// Method SaveRecipeAsync to store the recipes into the SQL database
private async Task SaveRecipeAsync(){
    Console.WriteLine(selectedRecipe.Duration);
    Console.WriteLine(selectedRecipe.Name);
    await localStorage.SetItemAsync(localStorageKey, recipes);
}

}