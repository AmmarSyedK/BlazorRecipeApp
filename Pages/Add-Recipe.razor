@page "/add-recipe"
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Add Recipe</h1>

<div class="row">
    <div class="col-4">
        <form action="row row-cold-lg-auto g_3 align-items-center">


            <u1 class="list-group mb-5">
                @foreach (var recipe in recipes)
                {
                    <p>@recipe.Name</p>
                    <p>@recipe.Ingredients</p>
                    <p>@recipe.Duration</p>
                }
            </u1>
            
            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Recipe name</label>
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Lasagna" @bind="recipeTitle">
            </div>

            <div class="mb-3">
                <label for="exampleFormControlTextarea1" class="form-label">Description</label>
                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" placeholder="1. Prepare the Bechamel Sauce..." @bind="recipeIngredients"></textarea>
            </div>
        
            <div class="form-group">
              <label for="durationInput">Duration (minutes):</label>
              <div class="input-group">
                <div class="input-group-prepend">
                  <button type="button" class="btn btn-primary" @onclick="DecreaseDuration">-</button>
                </div>
                <input type="number" class="form-control" min="0" step="15" @bind="recipeDuration" />
                <div class="input-group-append">
                  <button type="button" class="btn btn-primary" @onclick="IncreaseDuration">+</button>
                </div>
              </div>
            </div>
            <div class="form-group mb-4"></div>
            <div class="mb-3">
                <button class="btn btn-primary" type="submit" @onclick="AddRecipeAsync" @onclick:preventDefault>Add the recipe</button>
            </div>
            
        </form>
    </div>
</div>

@code {
    private int recipeDuration;
    private string recipeTitle;
    private string recipeIngredients;
    private void DecreaseDuration(){
        recipeDuration = Math.Max(recipeDuration - 15, 0);
    }
    private void IncreaseDuration(){
        recipeDuration += 15;
    }
    private List<RecipeItem> recipes = new();
    private async Task AddRecipeAsync()
    {
        if(!string.IsNullOrWhiteSpace(recipeTitle) && !string.IsNullOrWhiteSpace(recipeIngredients))
        {
            recipes.Add(new RecipeItem
            {
                Id = Guid.NewGuid().ToString(),
                Name = recipeTitle,
                Ingredients = recipeIngredients,
                Duration = recipeDuration
            });

            await SaveRecipeAsync();

            
        }
    }
    protected override async Task OnInitializedAsync(){
        var data = await GetRecipeAsync();

        if (data != null){
            recipes = data;
        }
    }
    
    private const string localStorageKey = "recipeapp";
    private async Task SaveRecipeAsync(){
        await localStorage.SetItemAsync(localStorageKey, recipes);
    }

    public List<RecipeItem> RecipeItems { get; set; } = new List<RecipeItem>();

    public static async Task <List<RecipeItem>> GetRecipeAsync(){
        return await localStorage.GetItemAsync<List<RecipeItem>>(localStorageKey);
    }

}

